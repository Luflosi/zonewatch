# SPDX-FileCopyrightText: 2024 Luflosi <zonewatch@luflosi.de>
# SPDX-License-Identifier: GPL-3.0-only

{ lib
, formats
, writeText
, runCommand
, zonewatch-minimal
}:
let
  ns-record = writeText "example.org-ns-record.zone" ''
    @  IN NS   ns.example.org.
  '';

  ns-ip = writeText "example.org-ns-ip.zone" ''
    ns IN A    127.0.0.1
    ns IN AAAA ::1
  '';

  config = {
    db = "db/db.sqlite";
    reload_program_bin = "touch";
    zones = {
      "example.org" = {
        dir = "zones"; # Where to store this zone file
        reload_program_args = [ "flag" ];
        ttl = "1d"; # Default TTL for the zone
        includes = [
          "${ns-record}"
          "${ns-ip}"
        ];
        soa = {
          ttl = "1d";
          mname = "ns1.example.org.";
          rname = "john\\.doe.example.org.";
          refresh = "1d";
          retry = "2h";
          expire = "1000h";
          minimum = "1h"; # Negative response caching TTL
        };
      };
    };
  };

  generate-zone-string = zone-name: zone: serial: let
    includes = lib.concatMapStrings (include: "$INCLUDE ${include}\n") zone.includes;
  in ''
    ; This file was automatically generated by zonewatch.
    ; Do not edit or your changes will be overwritten!

    $ORIGIN ${zone-name}.
    $TTL ${zone.ttl}
    @ ${zone.soa.ttl} IN SOA ${zone.soa.mname} ${zone.soa.rname} (
             ${toString serial} ; serial
            ${zone.soa.refresh} ; refresh
            ${zone.soa.retry} ; retry
         ${zone.soa.expire} ; expire
            ${zone.soa.minimum} ; negative
    )

  '' + includes;

  generate-zone = zone-name: zone: serial: let
    zone-string = generate-zone-string zone-name zone serial;
  in writeText "expected.zone" zone-string;
in
  {
    inherit
      config
      generate-zone
    ;
  }
