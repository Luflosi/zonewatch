# SPDX-FileCopyrightText: 2024 Luflosi <zonewatch@luflosi.de>
# SPDX-License-Identifier: GPL-3.0-only

{ lib
, formats
, writeText
, runCommand
, zonewatch-minimal
}:
let
  ns-record = writeText "example.org-ns-record.zone" ''
    @  IN NS   ns.example.org.
  '';

  ns-ip = writeText "example.org-ns-ip.zone" ''
    ns IN A    127.0.0.1
    ns IN AAAA ::1
  '';

  config = {
    db = "db/db.sqlite";
    reload_program_bin = "touch";
    zones = {
      "example.org" = {
        dir = "zones"; # Where to store this zone file
        reload_program_args = [ "flag" ];
        ttl = "1d"; # Default TTL for the zone
        includes = [
          "${ns-record}"
          "${ns-ip}"
        ];
        soa = {
          ttl = "1d";
          mname = "ns1.example.org.";
          rname = "john\\.doe.example.org.";
          refresh = "1d";
          retry = "2h";
          expire = "1000h";
          minimum = "1h"; # Negative response caching TTL
        };
      };
    };
  };

  config-file = (formats.toml { }).generate "config.toml" config;

  generate-zone-string = zone-name: zone: serial: let
    includes = lib.concatMapStrings (include: "$INCLUDE ${include}\n") zone.includes;
  in ''
    ; This file was automatically generated by zonewatch.
    ; Do not edit or your changes will be overwritten!

    $ORIGIN ${zone-name}.
    $TTL ${zone.ttl}
    @ ${zone.soa.ttl} IN SOA ${zone.soa.mname} ${zone.soa.rname} (
             ${toString serial} ; serial
            ${zone.soa.refresh} ; refresh
            ${zone.soa.retry} ; retry
         ${zone.soa.expire} ; expire
            ${zone.soa.minimum} ; negative
    )

  '' + includes;

  generate-zone = zone-name: zone: serial: let
    zone-string = generate-zone-string zone-name zone serial;
  in writeText "expected.zone" zone-string;

  expected-zone = generate-zone "example.org" config.zones."example.org" 1;

  state-after-initial-run = runCommand "zonewatch-initial-run" { } ''
    mkdir --verbose db
    export RUST_LOG=zonewatch=trace
    '${zonewatch-minimal}/bin/zonewatch' --only-init --config '${config-file}'
    if ! diff '${expected-zone}' 'zones/example.org.zone'; then
      echo 'The zone file is different from what was expected!'
      echo 'Expected:'
      cat -v '${expected-zone}'
      echo 'Actual:'
      cat -v 'zones/example.org.zone'
      exit 1
    fi
    echo 'The zone file is exactly what we expected ðŸŽ‰'

    if [ ! -e flag ]; then
      echo 'The update program was not called!'
      exit 1
    fi

    mkdir -p "$out"
    cp -r db zones "$out"
  '';
in
  {
    inherit
      ns-record
      ns-ip
      config
      config-file
      generate-zone-string
      generate-zone
      expected-zone
      state-after-initial-run
    ;
  }
